/*
函数名: draw_Xinductor_multi_ring_no_Xintersection
功能: 绘制多圈环形电感
参数: 
    centerX - 中心X坐标
    centerY - 中心Y坐标
    Nturns - 圈数
    spacing - 间距
    offsetX - 中心交叉处偏移量
    lengthX - X方向长度
    lengthY - Y方向长度
    cornerK - 拐角系数
    pathWidth - 导线宽度
    pathWidth_under - 下层导线宽度
    wireLayerName - 导线层名称
    underLayerName - 底层名称
    viaLayerName - 通孔层名称
    terminalmode - 终端模式
    terminalWidth - 终端宽度
    terminalLength - 终端长度
    terminalGap - 终端间隙
    intersection_spacing_ratio - 交叉结构间距比例
    via_add_length - 过孔附加长度
返回值: 无
*/
defun draw_Xinductor_multi_ring_no_Xintersection(centerX, centerY, Nturns, spacing, offsetX, lengthX, lengthY, cornerK, pathWidth, pathWidth_under, wireLayerName, underLayerName, viaLayerName, terminalmode, terminalWidth, terminalLength, terminalGap, intersection_spacing_ratio, via_add_length)
{    
    //选择并清除
    // de_select_all();
    // de_delete();

    draw_octagon_Nturns_inner_XY(centerX, centerY, Nturns, spacing, lengthX, lengthY, cornerK, pathWidth, wireLayerName);

    
    //选择全部
    de_select_all();

    decl lengthY_chop = lengthY + (Nturns - 1) * (spacing + pathWidth) * 2.0 + pathWidth;
    decl lengthX_chop = spacing + (1 + intersection_spacing_ratio) * pathWidth;
    
    // 使用de_chop创建中空区域（考虑中心点偏移）
    de_chop(centerX - lengthX_chop/2.0, centerY - lengthY_chop/2.0 + pathWidth,  // 内部区域左下角
            centerX + lengthX_chop/2.0, centerY + lengthY_chop/2.0);  // 内部区域右上角

    // 绘制交叉结构 上半部分
    draw_intersection_Nturns_upper(centerX, centerY + lengthY/2.0, Nturns, lengthX_chop, spacing, pathWidth, wireLayerName, underLayerName, viaLayerName);

    // 绘制交叉结构 下半部分
    draw_intersection_Nturns_lower(centerX, centerY - lengthY/2.0, Nturns, lengthX_chop, spacing, pathWidth, wireLayerName, underLayerName, viaLayerName);

    // 绘制终端
    decl length = spacing + pathWidth;
    decl new_centerY = centerY - ((Nturns - 1) * length + lengthY/2.0);
    if (terminalmode == 1)
    {

        draw_terminal(centerX, new_centerY, terminalWidth, pathWidth, terminalLength, terminalGap, wireLayerName);
    }

    else
    {
        draw_terminal(centerX, new_centerY, pathWidth, pathWidth, terminalLength, length, wireLayerName);
    }

    //选择全部
    de_select_all();

    decl lengthY_chop = (2.0 * Nturns - 1) * (spacing + pathWidth) + pathWidth + offsetX;
    decl lengthX_chop = lengthX + (Nturns - 1) * (spacing + pathWidth) * 2.0 + pathWidth;
    
    // 使用de_chop创建中空区域（考虑中心点偏移）
    de_chop(centerX - lengthX_chop/2.0, centerY - lengthY_chop/2.0,  // 内部区域左下角
            centerX + lengthX_chop/2.0, centerY + lengthY_chop/2.0);  // 内部区域右上角

    // 获取当前设计上下文
    decl context = de_get_current_design_context();
    
    // 获取指定层的ID和层号
    decl layerId1 = db_get_layerid(context, wireLayerName, "drawing");
    decl layerNum1 = db_get_layer_number(layerId1);

    // 设置导线属性
    de_set_path_width(pathWidth);  // 设置导线宽度
    de_set_path_corner(DB_SQUARE_CORNER);  // 设置方形拐角

    //绘制中间横向连接线
    // 设置当前绘制层
    de_set_layer(layerNum1);
    
    decl i = 0;

    for(i = 0; i < Nturns; i++)
    {

    // 开始绘制上方主体
    de_add_path();

    // 添加顶点
    de_add_point(centerX - (lengthX/2.0 + i * (spacing + pathWidth)), centerY + lengthY_chop/2.0);
    de_add_point(centerX - (lengthX/2.0 + i * (spacing + pathWidth)), centerY + (lengthY_chop/2.0 - i * (spacing + pathWidth) - pathWidth/2.0));
    de_add_point(centerX + (lengthX/2.0 + i * (spacing + pathWidth)), centerY + (lengthY_chop/2.0 - i * (spacing + pathWidth) - pathWidth/2.0));
    de_add_point(centerX + (lengthX/2.0 + i * (spacing + pathWidth)), centerY + lengthY_chop/2.0);

    // 结束路径绘制
    de_end();

    // 开始绘制下方主体
    de_add_path();

    // 添加顶点
    de_add_point(centerX - (lengthX/2.0 + i * (spacing + pathWidth)), centerY - lengthY_chop/2.0);
    de_add_point(centerX - (lengthX/2.0 + i * (spacing + pathWidth)), centerY - (lengthY_chop/2.0 - i * (spacing + pathWidth) - pathWidth/2.0));
    de_add_point(centerX + (lengthX/2.0 + i * (spacing + pathWidth)), centerY - (lengthY_chop/2.0 - i * (spacing + pathWidth) - pathWidth/2.0));
    de_add_point(centerX + (lengthX/2.0 + i * (spacing + pathWidth)), centerY - lengthY_chop/2.0);

    // 结束路径绘制
    de_end();

    }

    draw_Xintersection_chop_port(centerX, centerY, Nturns, spacing, pathWidth, pathWidth_under, offsetX, wireLayerName, underLayerName, viaLayerName, via_add_length);
    


}


