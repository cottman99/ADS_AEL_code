/*
函数名: draw_Xintersection_chop_port
功能: 绘制两层金属线的交叉结构，但只包含切割出端口
参数:
    centerX - 交叉结构中心X坐标
    centerY - 交叉结构中心Y坐标
    Nturns - 圈数
    spacing - 交叉处的间距
    pathWidth - 金属线宽度
    pathWidth_under - 下层金属线宽度
    offsetX - 交叉处的偏移量
    wireLayerName - 金属线所在的层名
    underLayerName - 下层金属线所在的层名
    viaLayerName - 过孔所在的层名
    via_add_length - 过孔附加长度
返回值: 无
注意事项:
    1. 两条金属线呈45度角交叉
    2. 交叉处的尺寸由spacing和pathWidth共同决定
    3. 两条金属线分别位于不同的金属层
    4. 本函数会根据输入参数计算交叉结构的尺寸，并绘制交叉结构
    5. 交叉结构的绘制包括上层和下层金属线的绘制，以及过孔的绘制
*/
defun draw_Xintersection_chop_port(centerX, centerY, Nturns, spacing, pathWidth, pathWidth_under, offsetX, wireLayerName, underLayerName, viaLayerName, via_add_length)
{    

    // 获取当前设计上下文
    decl context = de_get_current_design_context();
    
    // 获取指定层的ID和层号
    decl layerId1 = db_get_layerid(context, wireLayerName, "drawing");
    decl layerId2 = db_get_layerid(context, underLayerName, "drawing");
    decl layerId3 = db_get_layerid(context, viaLayerName, "drawing");

    //计算参数
    decl spacingY = spacing + pathWidth;
    decl spacingY_under = spacing + pathWidth_under;
    decl spacingX = pathWidth_under;

    decl lengthInner = (Nturns) * spacingY + offsetX;
    decl lengthInner_under = (Nturns) * spacingY_under + offsetX;
    
    decl via_length = via_add_length;
    decl lengthOuter = lengthInner_under + via_length * 2.0 + spacingX * 2.0;

    decl i = 0;
    decl chopOuterX = lengthOuter + (Nturns - 1) * spacingX;
    decl chopOuterY = 2.0 * Nturns * spacingY + offsetX;

    // 选择所有对象
    de_select_all();
    // 在指定区域切割
    de_chop(centerX - chopOuterX/2.0, centerY - chopOuterY/2.0, centerX + chopOuterX/2.0, centerY + chopOuterY/2.0);
    // 取消选择所有对象
    de_deselect_all();

    for(i = 0; i < Nturns; i++)
    {   

        decl endX = lengthOuter + (Nturns - 1 - i * 2) * spacingX - 2 * via_length;
        decl endY = lengthInner - (Nturns - 1 - i *2) * spacingY;

        db_create_pin(context, centerX - chopOuterX/2.0, centerY - endY/2.0, 0, layerId1);
        db_create_pin(context, centerX + chopOuterX/2.0, centerY - endY/2.0, 180, layerId1);
        db_create_pin(context, centerX - chopOuterX/2.0, centerY + endY/2.0, 0, layerId1);
        db_create_pin(context, centerX + chopOuterX/2.0, centerY + endY/2.0, 180, layerId1);

    }

}
