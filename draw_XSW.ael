/*
 * 函数名: draw_XSW
 * 参数:
 *  Nturns_Top: 初级绕组的圈数
 *  Nturns_Mid: 初级绕组的圈数
 *  Nturns_Bot: 次级绕组的圈数
 *  spacing_Top: 初级绕组之间的间距 
 *  spacing_Mid: 初级绕组之间的间距 
 *  spacing_Bot: 次级绕组之间的间距
 *  pathWidth_Top: 初级绕组的路径宽度
 *  pathWidth_Mid: 初级绕组的路径宽度
 *  pathWidth_Bot: 次级绕组的路径宽度
 *  offsetX: 交叉处的偏移量
 *  lengthX: 变压器的X方向长度
 *  lengthY: 变压器的Y方向长度
 *  cornerK: 角度系数
 *  GND_gap: GND层与变压器之间的间距
 *  terminalmode: 终端模式
 *  terminalWidth: 终端宽度
 *  terminalGap: 终端间距
 *  wireLayerName_Top: 初级绕组的线路层名称
 *  wireLayerName_Mid: 初级绕组的线路层名称
 *  wireLayerName_Bot: 次级绕组的线路层名称
 *  underLayerName_Top: 初级绕组的下层名称
 *  underLayerName_Mid: 初级绕组的下层名称
 *  underLayerName_Bot: 次级绕组的下层名称
 *  viaLayerName_Top: 初级绕组的通孔层名称
 *  viaLayerName_Mid: 初级绕组的通孔层名称
 *  viaLayerName_Bot: 次级绕组的通孔层名称
 *  gndLayerName: GND层的字符串列表
 *  direction: 方向
 *  terminalLength_offset: 终端长度偏移
 *  GND_width: GND层的宽度
 * 
 * 函数描述: 绘制垂直变压器的结构，包括初级绕组、次级绕组和GND层。
 */
defun draw_XSW( Nturns_Top, Nturns_Mid, Nturns_Bot, spacing_Top, spacing_Mid, spacing_Bot, pathWidth_Top, pathWidth_Mid, pathWidth_Bot, offsetX, lengthX, lengthY, cornerK, GND_gap, terminalmode, terminalWidth, terminalGap, wireLayerName_Top, wireLayerName_Mid, wireLayerName_Bot, underLayerName_Top, underLayerName_Mid, underLayerName_Bot, viaLayerName_Top, viaLayerName_Mid, viaLayerName_Bot, gndLayerName, direction , terminalLength_offset , GND_width)
{    
    // 选择并清除所有对象
    de_select_all();
    de_delete();

    // 计算或定义参数
    // centerX 和 centerY 定义了变压器的中心坐标
    decl centerX = 0;
    decl centerY = 0;
    //  lengthRef_Top 和 lengthRef_Mid 和 lengthRef_Bot 计算了初级和次级绕组的参考长度
    decl lengthRef_Top = pathWidth_Top + spacing_Top;
    decl lengthRef_Mid = pathWidth_Mid + spacing_Mid;
    decl lengthRef_Bot = pathWidth_Bot + spacing_Bot;

    

    // lengthX_Top, lengthY_Top, lengthX_Mid, lengthY_Mid, lengthX_Bot, lengthY_Bot 计算了初级和次级绕组的实际长度
    decl lengthX_Top = lengthX - lengthRef_Top * (Nturns_Top - 1);
    decl lengthY_Top = lengthY - lengthRef_Top * (Nturns_Top - 1);
    decl lengthX_Mid = lengthX - lengthRef_Mid * (Nturns_Mid - 1);
    decl lengthY_Mid = lengthY - lengthRef_Mid * (Nturns_Mid - 1);
    decl lengthX_Bot = lengthX - lengthRef_Bot * (Nturns_Bot - 1);
    decl lengthY_Bot = lengthY - lengthRef_Bot * (Nturns_Bot - 1);

    // Max_outerX 和 Max_outerY 计算了变压器的最大外部尺寸
    decl Max_outerX = max2(lengthX + lengthRef_Top * (Nturns_Top - 1) + pathWidth_Top, lengthX + lengthRef_Mid * (Nturns_Mid - 1) + pathWidth_Mid, lengthX + lengthRef_Bot * (Nturns_Bot - 1) + pathWidth_Bot);
    decl Max_outerY = max2(lengthY + lengthRef_Top * (Nturns_Top - 1) + pathWidth_Top, lengthY + lengthRef_Mid * (Nturns_Mid - 1) + pathWidth_Mid, lengthY + lengthRef_Bot * (Nturns_Bot - 1) + pathWidth_Bot);

    // 计算GND层的参考宽度
    decl lengthRef_GND_width = GND_width*2;

    // lengthX_innerGND, lengthY_innerGND, lengthX_outerGND, lengthY_outerGND 计算了GND层的内部和外部尺寸
    decl lengthX_innerGND = Max_outerX + GND_gap;
    decl lengthY_innerGND = Max_outerY + GND_gap;
    decl lengthX_outerGND = lengthX_innerGND + lengthRef_GND_width;
    decl lengthY_outerGND = lengthY_innerGND + lengthRef_GND_width;

    // 计算初级和次级绕组的终端长度
    decl terminalLength_Top = pathWidth_Top/2.0 + terminalLength_offset + (lengthY_innerGND - (lengthY + lengthRef_Top * (Nturns_Top - 1) + pathWidth_Top))/2.0;
    decl terminalLength_Mid = pathWidth_Mid/2.0 + terminalLength_offset + (lengthY_innerGND - (lengthY + lengthRef_Mid * (Nturns_Mid - 1) + pathWidth_Mid))/2.0;
    decl terminalLength_Bot = pathWidth_Bot/2.0 + terminalLength_offset + (lengthY_innerGND - (lengthY + lengthRef_Bot * (Nturns_Bot - 1) + pathWidth_Bot))/2.0;

    //绘制hollow GND
    draw_hollow_rectangle_multilayer(centerX, centerY, lengthX_innerGND, lengthY_innerGND, lengthX_outerGND, lengthY_outerGND, gndLayerName);

    //绘制初级绕组
    draw_Xinductor_multi_ring_no_Xintersection(centerX + 2* lengthY_outerGND, centerY, Nturns_Mid, spacing_Mid, offsetX, lengthX_Mid, lengthY_Mid, cornerK, pathWidth_Mid, pathWidth_Bot, wireLayerName_Mid, underLayerName_Mid, viaLayerName_Mid, terminalmode, terminalWidth, terminalLength_Mid, terminalGap, 2, 0);

    //绘制次级绕组
    draw_Xinductor_multi_ring(centerX - 2* lengthY_outerGND, centerY, Nturns_Bot, spacing_Bot, offsetX, lengthX_Bot, lengthY_Bot, cornerK, pathWidth_Bot, wireLayerName_Bot, underLayerName_Bot, viaLayerName_Bot, terminalmode, terminalWidth, terminalLength_Bot, terminalGap, 2,2);

    // 根据方向进行旋转和移动
    decl anglelist = {0, 90, 180, 270};
    decl angle = anglelist[direction];

    // 移动和旋转初级绕组
    de_select_range(centerX + 2* lengthY_outerGND - lengthY_outerGND/2.0, centerY - lengthY_outerGND/2.0, centerX + 2* lengthY_outerGND + lengthY_outerGND/2.0, centerY + lengthY_outerGND/2.0);
    de_move(-2* lengthY_outerGND, 0);

    // 移动和旋转次级绕组
    de_select_range(centerX - 2* lengthY_outerGND - lengthY_outerGND/2.0, centerY - lengthY_outerGND/2.0, centerX - 2* lengthY_outerGND + lengthY_outerGND/2.0, centerY + lengthY_outerGND/2.0);
    de_rotate(centerX - 2* lengthY_outerGND, centerY, angle);
    de_move(2* lengthY_outerGND, 0);

    draw_inductor_multi_ring(centerX - 2* lengthY_outerGND, centerY, Nturns_Top, spacing_Top, lengthX_Top, lengthY_Top, cornerK, pathWidth_Top, wireLayerName_Top, underLayerName_Top, viaLayerName_Top, terminalmode, terminalWidth, terminalLength_Top, terminalGap, 2);

     // 移动和旋转次级绕组
    de_select_range(centerX - 2* lengthY_outerGND - lengthY_outerGND/2.0, centerY - lengthY_outerGND/2.0, centerX - 2* lengthY_outerGND + lengthY_outerGND/2.0, centerY + lengthY_outerGND/2.0);
    de_rotate(centerX - 2* lengthY_outerGND, centerY, angle);
    de_move(2* lengthY_outerGND, 0);

    // 取消所有选择
    de_deselect_all();

}