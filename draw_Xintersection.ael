/*
函数名: draw_Xintersection
功能: 绘制两层金属线的交叉结构
参数:
    centerX - 交叉结构中心X坐标
    centerY - 交叉结构中心Y坐标
    Nturns - 圈数
    spacing - 交叉处的间距
    pathWidth - 金属线宽度
    offsetX - 交叉处的偏移量
    wireLayerName - 金属线所在的层名
    underLayerName - 下层金属线所在的层名
    viaLayerName - 过孔所在的层名
    via_length_k - 过孔长度系数
返回值: 无
注意事项:
    1. 两条金属线呈45度角交叉
    2. 交叉处的尺寸由spacing和pathWidth共同决定
    3. 两条金属线分别位于不同的金属层
    4. 本函数会根据输入参数计算交叉结构的尺寸，并绘制交叉结构
    5. 交叉结构的绘制包括上层和下层金属线的绘制，以及过孔的绘制
*/
defun draw_Xintersection(centerX, centerY, Nturns, spacing, pathWidth, offsetX, wireLayerName, underLayerName, viaLayerName, via_length_k)
{   

    // 获取当前设计上下文
    decl context = de_get_current_design_context();
    
    // 获取指定层的ID和层号
    decl layerId1 = db_get_layerid(context, wireLayerName, "drawing");
    decl layerId2 = db_get_layerid(context, underLayerName, "drawing");
    decl layerId3 = db_get_layerid(context, viaLayerName, "drawing");
    decl layerNum1 = db_get_layer_number(layerId1);
    decl layerNum2 = db_get_layer_number(layerId2);
    decl layerNum3 = db_get_layer_number(layerId3);

    // 设置导线属性
    de_set_path_width(pathWidth);  // 设置导线宽度
    de_set_path_corner(DB_SQUARE_CORNER);  // 设置方形拐角

    //计算参数
    decl spacingY = spacing + pathWidth;
    decl spacingX = pathWidth;

    decl lengthInner = (Nturns) * spacingY + offsetX;
    
    decl via_length = via_length_k * spacingX;
    decl lengthOuter = lengthInner + via_length * 2.0 + pathWidth * 2.0;

    decl i = 0;
    decl chopOuterX = lengthOuter + (Nturns - 1) * spacingX;
    decl chopOuterY = 2.0 * Nturns * spacingY + offsetX;

    // 选择所有对象
    de_select_all();
    // 在指定区域切割
    de_chop(centerX - chopOuterX/2.0, centerY - chopOuterY/2.0, centerX + chopOuterX/2.0, centerY + chopOuterY/2.0);
    // 取消选择所有对象
    de_deselect_all();

    for(i = 0; i < Nturns; i++)
    {   

        decl endX = lengthOuter + (Nturns - 1 - i * 2) * spacingX - 2 * via_length;
        decl endY = lengthInner - (Nturns - 1 - i *2) * spacingY;

        // 绘制Z形状
        draw_Zshape(centerX + (i - (Nturns - 1)/2.0) * spacingX, centerY + (i - (Nturns - 1)/2.0) * spacingY, lengthInner, lengthOuter, pathWidth, wireLayerName, 0);

        // 设置当前绘制层
        de_set_layer(layerNum1);

        // 添加路径
        de_add_path();
        // 添加点
        de_add_point(centerX + chopOuterX/2.0, centerY - endY/2.0);
        de_add_point(centerX + endX/2.0, centerY - endY/2.0);
        // 结束路径
        de_end();

        // 添加路径
        de_add_path();
        // 添加点
        de_add_point(centerX - chopOuterX/2.0, centerY + endY/2.0);
        de_add_point(centerX - endX/2.0, centerY + endY/2.0);
        // 结束路径
        de_end();

        // 绘制Z形状
        draw_Zshape(centerX - (i - (Nturns - 1)/2.0) * spacingX, centerY + (i - (Nturns - 1)/2.0) * spacingY, lengthInner, lengthOuter, pathWidth, underLayerName, 1);

        // 创建图层列表
        decl list_layer = list(layerNum1, layerNum2, layerNum3);
        decl i = 0;
        for(i = 0; i < listlen(list_layer); i++)
        {
            // 设置当前绘制层
            de_set_layer(list_layer[i]);

            // 添加路径
            de_add_path();
            // 添加点
            de_add_point(centerX - chopOuterX/2.0, centerY - endY/2.0);
            de_add_point(centerX - endX/2.0, centerY - endY/2.0);
            // 结束路径
            de_end();

            // 添加路径
            de_add_path();
            // 添加点
            de_add_point(centerX + chopOuterX/2.0, centerY + endY/2.0);
            de_add_point(centerX + endX/2.0, centerY + endY/2.0);
            // 结束路径
            de_end();
        }



    }

}
