/*
 * 函数名: draw_transformer_vertical_dual_layer
 * 参数:
 *  ifduallayer_Primary: 初级绕组是否为双层
 *  ifduallayer_Secondary: 次级绕组是否为双层
 *  Nturns_Primary: 初级绕组的圈数
 *  Nturns_Secondary: 次级绕组的圈数
 *  spacing_Primary: 初级绕组之间的间距
 *  spacing_Secondary: 次级绕组之间的间距
 *  pathWidth_Primary: 初级绕组的路径宽度
 *  pathWidth_Secondary: 次级绕组的路径宽度
 *  lengthX: 变压器的X方向长度
 *  lengthY: 变压器的Y方向长度
 *  cornerK: 角度系数
 *  GND_gap: GND层与变压器之间的间距
 *  terminalmode: 终端模式
 *  terminalWidth: 终端宽度
 *  terminalGap: 终端间距
 *  wireLayerName_Primary: 初级绕组的线路层名称
 *  wireLayerName_Secondary: 次级绕组的线路层名称
 *  underLayerName_Primary: 初级绕组的下层名称
 *  underLayerName_Secondary: 次级绕组的下层名称
 *  viaLayerName_Primary: 初级绕组的通孔层名称
 *  viaLayerName_Secondary: 次级绕组的通孔层名称
 *  gndLayerName: GND层的名称
 *  direction: 方向
 *  terminalLength_offset: 终端长度偏移
 *  GND_width: GND层的宽度
 * 
 * 函数描述: 绘制垂直变压器的结构，包括初级绕组、次级绕组和GND层。
 */
defun draw_transformer_vertical_dual_layer( ifduallayer_Primary, ifduallayer_Secondary, Nturns_Primary, Nturns_Secondary, spacing_Primary, spacing_Secondary, pathWidth_Primary, pathWidth_Secondary, lengthX, lengthY, cornerK, GND_gap, terminalmode, terminalWidth, terminalGap, wireLayerName_Primary, wireLayerName_Secondary, underLayerName_Primary, underLayerName_Secondary, viaLayerName_Primary, viaLayerName_Secondary, gndLayerName, direction , terminalLength_offset , GND_width)
{    
    // 选择并清除所有对象
    de_select_all();
    de_delete();

    // 计算或定义参数
    // centerX 和 centerY 定义了变压器的中心坐标
    decl centerX = 0;
    decl centerY = 0;
    // lengthRef_Primary 和 lengthRef_Secondary 计算了初级和次级绕组的参考长度
    decl lengthRef_Primary = pathWidth_Primary + spacing_Primary;
    decl lengthRef_Secondary = pathWidth_Secondary + spacing_Secondary;
    

    // lengthX_Primary, lengthY_Primary, lengthX_Secondary, lengthY_Secondary 计算了初级和次级绕组的实际长度
    decl lengthX_Primary = lengthX - lengthRef_Primary * (Nturns_Primary - 1);
    decl lengthY_Primary = lengthY - lengthRef_Primary * (Nturns_Primary - 1);
    decl lengthX_Secondary = lengthX - lengthRef_Secondary * (Nturns_Secondary - 1);
    decl lengthY_Secondary = lengthY - lengthRef_Secondary * (Nturns_Secondary - 1);

    // Max_outerX 和 Max_outerY 计算了变压器的最大外部尺寸
    decl Max_outerX = max2(lengthX + lengthRef_Primary * (Nturns_Primary - 1) + pathWidth_Primary, lengthX + lengthRef_Secondary * (Nturns_Secondary - 1) + pathWidth_Secondary);
    decl Max_outerY = max2(lengthY + lengthRef_Primary * (Nturns_Primary - 1) + pathWidth_Primary, lengthY + lengthRef_Secondary * (Nturns_Secondary - 1) + pathWidth_Secondary);

    // 计算GND层的参考宽度
    decl lengthRef_GND_width = GND_width*2;

    // lengthX_innerGND, lengthY_innerGND, lengthX_outerGND, lengthY_outerGND 计算了GND层的内部和外部尺寸
    decl lengthX_innerGND = Max_outerX + GND_gap;
    decl lengthY_innerGND = Max_outerY + GND_gap;
    decl lengthX_outerGND = lengthX_innerGND + lengthRef_GND_width;
    decl lengthY_outerGND = lengthY_innerGND + lengthRef_GND_width;

    // 计算初级和次级绕组的终端长度
    decl terminalLength_primary = pathWidth_Primary/2.0 + terminalLength_offset + (lengthY_innerGND - (lengthY + lengthRef_Primary * (Nturns_Primary - 1) + pathWidth_Primary))/2.0;
    decl terminalLength_secondary = pathWidth_Secondary/2.0 + terminalLength_offset + (lengthY_innerGND - (lengthY + lengthRef_Secondary * (Nturns_Secondary - 1) + pathWidth_Secondary))/2.0;

    //绘制hollow GND
    draw_hollow_rectangle_multilayer(centerX, centerY, lengthX_innerGND, lengthY_innerGND, lengthX_outerGND, lengthY_outerGND, gndLayerName);

    //绘制初级绕组
    draw_inductor_multi_ring_dual_layer(ifduallayer_Primary,centerX + 2* lengthY_outerGND, centerY, Nturns_Primary, spacing_Primary, lengthX_Primary, lengthY_Primary, cornerK, pathWidth_Primary, wireLayerName_Primary, underLayerName_Primary, viaLayerName_Primary, terminalmode, terminalWidth, terminalLength_primary, terminalGap, 2);

    //绘制次级绕组
    draw_inductor_multi_ring_dual_layer(ifduallayer_Secondary, centerX - 2* lengthY_outerGND, centerY, Nturns_Secondary, spacing_Secondary, lengthX_Secondary, lengthY_Secondary, cornerK, pathWidth_Secondary, wireLayerName_Secondary, underLayerName_Secondary, viaLayerName_Secondary, terminalmode, terminalWidth, terminalLength_secondary, terminalGap, 2);

    // 根据方向进行旋转和移动
    decl anglelist = {0, 90, 180, 270};
    decl angle = anglelist[direction];

    // 移动和旋转初级绕组
    de_select_range(centerX + 2* lengthY_outerGND - lengthY_outerGND/2.0, centerY - lengthY_outerGND/2.0, centerX + 2* lengthY_outerGND + lengthY_outerGND/2.0, centerY + lengthY_outerGND/2.0);
    de_move(-2* lengthY_outerGND, 0);

    // 移动和旋转次级绕组
    de_select_range(centerX - 2* lengthY_outerGND - lengthY_outerGND/2.0, centerY - lengthY_outerGND/2.0, centerX - 2* lengthY_outerGND + lengthY_outerGND/2.0, centerY + lengthY_outerGND/2.0);
    de_rotate(centerX - 2* lengthY_outerGND, centerY, angle);
    de_move(2* lengthY_outerGND, 0);

    // 取消所有选择
    de_deselect_all();

}